generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String     @id @default(cuid())
  name                   String?
  email                  String     @unique
  role                   Role
  status                 UserStatus @default(ACTIVE)
  image                  String?
  passwordHash           String?
  passwordResetToken     String?
  passwordResetExpiresAt DateTime?
  invitedById            String?
  invitationToken        String?
  invitedAt              DateTime?
  activatedAt            DateTime?
  isActive               Boolean    @default(true)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  deletedAt              DateTime?
  deletedBy              String?

  @@index([email])

  accounts              Account[]
  sessions              Session[]
  contacts              Contact[]              @relation("ContactOwner")
  tasks                 Task[]                 @relation("TaskAssignee")
  matters               Matter[]               @relation("MatterOwner")
  matterTeamMemberships MatterTeamMember[]     @relation("MatterTeamMembers")
  documents             Document[]             @relation("DocumentUploader")
  events                Event[]                @relation("EventOrganizer")
  calendars             Calendar[]
  notes                 Note[]
  auditLogs             AuditLog[]
  workflowTemplates     WorkflowTemplate[]
  workflowInstances     WorkflowInstance[]
  assignedWorkflowSteps WorkflowInstanceStep[] @relation("UserAssignedWorkflowSteps")
  invitedBy             User?                  @relation("UserInvitations", fields: [invitedById], references: [id])
  invitedClients        User[]                 @relation("UserInvitations")
  clientProfile         Contact?               @relation("ContactUser")
  sentMessages          Message[]              @relation("MessageSender")
  requestedApprovals       Approval[]                  @relation("ApprovalRequester")
  clientApprovals          Approval[]                  @relation("ApprovalClient")
  resolvedApprovals        Approval[]                  @relation("ApprovalResolver")
  createdQuestionnaires    Questionnaire[]             @relation("QuestionnaireCreator")
  questionnaireResponses   QuestionnaireResponse[]     @relation("QuestionnaireRespondent")
}

enum Role {
  ADMIN
  LAWYER
  PARALEGAL
  CLIENT
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id                String        @id @default(cuid())
  type              ContactType   @default(LEAD)
  firstName         String
  lastName          String
  email             String?
  phone             String?
  company           String?
  status            ContactStatus @default(NEW)
  source            String?
  tags              String[]
  ownerId           String?
  userId            String?       @unique
  address           String?
  city              String?
  state             String?
  zip               String?
  country           String?
  notes             String?
  preferredLanguage String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  deletedBy         String?

  owner         User?               @relation("ContactOwner", fields: [ownerId], references: [id])
  matters       MatterContact[]
  clientMatters Matter[]            @relation("MatterClient")
  documents     Document[]          @relation("DocumentContact")
  user          User?               @relation("ContactUser", fields: [userId], references: [id], onDelete: SetNull)
  workflowInstances WorkflowInstance[]

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum ContactType {
  LEAD
  CLIENT
  OTHER
}

enum ContactStatus {
  NEW
  QUALIFIED
  DISQUALIFIED
  ACTIVE
  ARCHIVED
}

model Matter {
  id              String       @id @default(cuid())
  title           String
  type            String
  status          MatterStatus @default(OPEN)
  jurisdiction    String?
  court           String?
  openedAt        DateTime     @default(now())
  nextHearingAt   DateTime?
  closedAt        DateTime?
  closedBy        String?
  estimatedValue  Decimal?     @db.Decimal(10, 2)
  actualValue     Decimal?     @db.Decimal(10, 2)
  clientId        String
  ownerId         String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  deletedBy       String?

  client Contact @relation("MatterClient", fields: [clientId], references: [id])
  owner  User?   @relation("MatterOwner", fields: [ownerId], references: [id])

  parties               MatterContact[]
  teamMembers           MatterTeamMember[]
  documents             Document[]
  events                Event[]
  tasks                 Task[]
  workflowInstances     WorkflowInstance[]
  messages              Message[]
  approvals             Approval[]
  questionnaireResponses QuestionnaireResponse[]

  @@index([status])
  @@index([type])
  @@index([openedAt])
  @@index([createdAt])
}

enum MatterStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  CLOSED
}

model MatterContact {
  id        String    @id @default(cuid())
  matterId  String
  contactId String
  role      PartyRole

  matter  Matter  @relation(fields: [matterId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([matterId, contactId, role])
}

enum PartyRole {
  PLAINTIFF
  DEFENDANT
  WITNESS
  OPPOSING_COUNSEL
}

model MatterTeamMember {
  id        String   @id @default(cuid())
  matterId  String
  userId    String
  role      Role
  addedAt   DateTime @default(now())
  addedBy   String?

  matter Matter @relation(fields: [matterId], references: [id], onDelete: Cascade)
  user   User   @relation("MatterTeamMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([matterId, userId])
  @@index([matterId])
  @@index([userId])
}

model Document {
  id               String     @id @default(cuid())
  matterId         String?
  contactId        String?
  workflowStepId   String?
  uploaderId       String
  filename         String
  mime             String
  size             Int
  version          Int        @default(1)
  tags             String[]
  storageKey       String
  hash             String?
  signedAt         DateTime?
  metadata         Json?
  parentDocumentId String?
  createdAt        DateTime   @default(now())
  deletedAt        DateTime?
  deletedBy        String?

  matter         Matter?                @relation(fields: [matterId], references: [id])
  contact        Contact?               @relation("DocumentContact", fields: [contactId], references: [id])
  workflowStep   WorkflowInstanceStep?  @relation("DocumentWorkflowStep", fields: [workflowStepId], references: [id], onDelete: SetNull)
  uploader       User                   @relation("DocumentUploader", fields: [uploaderId], references: [id])
  parentDocument Document?              @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  versions       Document[]             @relation("DocumentVersions")
  taskLinks      TaskLink[]
  approvals      Approval[]

  @@index([matterId, filename])
  @@index([contactId])
  @@index([workflowStepId])
  @@index([matterId, hash])
  @@index([parentDocumentId])
  @@index([createdAt])
}



model Message {
  id          String    @id @default(cuid())
  matterId    String
  senderId    String
  text        String
  attachments Json?
  replyToId   String?
  readAt      DateTime?
  createdAt   DateTime  @default(now())

  matter  Matter    @relation(fields: [matterId], references: [id], onDelete: Cascade)
  sender  User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo Message?  @relation("MessageThread", fields: [replyToId], references: [id])
  replies Message[] @relation("MessageThread")

  @@index([matterId, createdAt])
  @@index([senderId])
}

model Approval {
  id            String         @id @default(cuid())
  matterId      String
  documentId    String?
  requestedById String
  clientUserId  String?
  resolvedById  String?
  status        ApprovalStatus @default(PENDING)
  requestedAt   DateTime       @default(now())
  resolvedAt    DateTime?
  clientComment String?
  metadata      Json?

  matter      Matter    @relation(fields: [matterId], references: [id], onDelete: Cascade)
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  requestedBy User      @relation("ApprovalRequester", fields: [requestedById], references: [id], onDelete: Cascade)
  clientUser  User?     @relation("ApprovalClient", fields: [clientUserId], references: [id], onDelete: SetNull)
  resolvedBy  User?     @relation("ApprovalResolver", fields: [resolvedById], references: [id], onDelete: SetNull)

  @@index([matterId])
  @@index([documentId])
  @@index([requestedById])
  @@index([clientUserId])
  @@index([status])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
}

model Event {
  id              String    @id @default(cuid())
  calendarId      String?
  matterId        String?
  organizerId     String
  title           String
  description     String?
  startAt         DateTime
  endAt           DateTime
  location        String?
  attendees       Json      @default("[]")
  reminderMinutes Int       @default(30)
  externalCalId   String?
  externalEtag    String?
  reminderSentAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  deletedBy       String?

  calendar  Calendar?  @relation(fields: [calendarId], references: [id])
  matter    Matter?    @relation(fields: [matterId], references: [id])
  organizer User       @relation("EventOrganizer", fields: [organizerId], references: [id])
  taskLinks TaskLink[]

  @@index([startAt])
  @@index([calendarId, externalCalId])
  @@index([createdAt])
}

model Calendar {
  id                     String           @id @default(cuid())
  userId                 String
  name                   String
  provider               CalendarProvider @default(LOCAL)
  externalId             String?
  syncToken              String?
  webhookChannelId       String?
  webhookResourceId      String?
  webhookExpirationAt    DateTime?
  lastSyncedAt           DateTime?
  defaultReminderMinutes Int              @default(30)
  icsTokenHash           String?
  icsTokenCreatedAt      DateTime?
  isPrimary              Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events Event[]

  @@unique([userId, provider])
  @@unique([userId, externalId])
  @@index([userId])
}

model Task {
  id                 String       @id @default(cuid())
  matterId           String?
  assigneeId         String?
  title              String
  description        String?
  dueAt              DateTime?
  priority           TaskPriority @default(MEDIUM)
  status             TaskStatus   @default(OPEN)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  reminderNotified   Boolean      @default(false)
  reminderNotifiedAt DateTime?
  deletedAt          DateTime?
  deletedBy          String?

  matter     Matter?         @relation(fields: [matterId], references: [id])
  assignee   User?           @relation("TaskAssignee", fields: [assigneeId], references: [id])
  checklists TaskChecklist[]
  links      TaskLink[]

  @@index([matterId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueAt])
  @@index([assigneeId, status, dueAt])
  @@index([createdAt])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
  CANCELED
}

model TaskChecklist {
  id        String   @id @default(cuid())
  taskId    String
  title     String
  done      Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([taskId, order])
}

model TaskLink {
  id         String   @id @default(cuid())
  taskId     String
  documentId String?
  eventId    String?
  url        String?
  createdAt  DateTime @default(now())

  task     Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  event    Event?    @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@index([taskId])
  @@index([documentId])
  @@index([eventId])
}

model WorkflowTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  version       Int      @default(1)
  isActive      Boolean  @default(false)
  contextSchema Json?    // Schema definition for workflow context (validation, defaults, types)
  createdById   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdBy User?                  @relation(fields: [createdById], references: [id], onDelete: SetNull)
  steps     WorkflowTemplateStep[]
  instances WorkflowInstance[]

  @@unique([name, version])
}

model WorkflowTemplateStep {
  id           String     @id @default(cuid())
  templateId   String
  order        Int
  title        String
  actionType   ActionType
  actionConfig Json
  roleScope    RoleScope
  required     Boolean    @default(true)
  
  // Conditional execution
  conditionType    ConditionType? @default(ALWAYS)
  conditionConfig  Json?
  nextStepOnTrue   Int?  // Order of step to execute if condition is true
  nextStepOnFalse  Int?  // Order of step to execute if condition is false
  
  // Flexible dependencies (P0.2)
  dependsOn        Int[]  @default([])  // Array of step orders this step depends on
  dependencyLogic  DependencyLogic @default(ALL)
  
  // Canvas position (P0.3 - for visual workflow builder)
  positionX    Float?  @default(0)  // X coordinate on canvas
  positionY    Float?  @default(100)  // Y coordinate on canvas
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  template      WorkflowTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  instanceSteps WorkflowInstanceStep[]

  @@unique([templateId, order])
}

model WorkflowInstance {
  id              String                 @id @default(cuid())
  templateId      String
  matterId        String?                // Optional - for matter workflows
  contactId       String?                // Optional - for lead workflows
  templateVersion Int
  createdById     String
  status          WorkflowInstanceStatus @default(DRAFT)
  contextData     Json?                  // Shared data across all workflow steps
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  template  WorkflowTemplate       @relation(fields: [templateId], references: [id], onDelete: Restrict)
  matter    Matter?                @relation(fields: [matterId], references: [id], onDelete: Cascade)
  contact   Contact?               @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdBy User                   @relation(fields: [createdById], references: [id], onDelete: Restrict)
  steps     WorkflowInstanceStep[]

  @@index([matterId, status])
  @@index([contactId, status])
  @@index([createdById])
}

model WorkflowInstanceStep {
  id             String        @id @default(cuid())
  instanceId     String
  templateStepId String?
  order          Int
  title          String
  actionType     ActionType
  roleScope      RoleScope
  required       Boolean       @default(true)
  actionState    ActionState   @default(PENDING)
  actionData     Json?
  assignedToId   String?
  dueDate        DateTime?
  priority       TaskPriority? @default(MEDIUM)
  notes          String?
  startedAt      DateTime?
  completedAt    DateTime?
  
  // Conditional execution
  conditionType    ConditionType? @default(ALWAYS)
  conditionConfig  Json?
  nextStepOnTrue   Int?  // Order of step to execute if condition is true
  nextStepOnFalse  Int?  // Order of step to execute if condition is false
  
  // Flexible dependencies (P0.2)
  dependsOn        String[]  @default([])  // Array of step IDs this step depends on
  dependencyLogic  DependencyLogic @default(ALL)
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  instance     WorkflowInstance      @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  templateStep WorkflowTemplateStep? @relation(fields: [templateStepId], references: [id], onDelete: SetNull)
  assignedTo   User?                 @relation("UserAssignedWorkflowSteps", fields: [assignedToId], references: [id], onDelete: SetNull)
  documents    Document[]            @relation("DocumentWorkflowStep")

  @@unique([instanceId, order])
  @@index([instanceId, actionState])
  @@index([assignedToId])
  @@index([dueDate])
}

enum ActionType {
  APPROVAL_LAWYER
  SIGNATURE_CLIENT
  REQUEST_DOC
  PAYMENT_CLIENT
  TASK
  CHECKLIST
  WRITE_TEXT
  POPULATE_QUESTIONNAIRE
}

enum RoleScope {
  ADMIN
  LAWYER
  PARALEGAL
  CLIENT
}

enum ActionState {
  PENDING
  READY
  IN_PROGRESS
  BLOCKED
  COMPLETED
  FAILED
  SKIPPED
}

enum ConditionType {
  ALWAYS              // Default - always execute (no condition)
  IF_TRUE             // Execute only if condition is true
  IF_FALSE            // Execute only if condition is false
  SWITCH              // Multiple conditions (future enhancement)
}

enum DependencyLogic {
  ALL     // All dependencies must complete (AND logic)
  ANY     // At least one dependency must complete (OR logic)
  CUSTOM  // Custom expression (future enhancement)
}

enum WorkflowInstanceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELED
}

enum CalendarProvider {
  LOCAL
  GOOGLE
}

model Note {
  id         String     @id @default(cuid())
  parentType ParentType
  parentId   String
  authorId   String
  body       String
  createdAt  DateTime   @default(now())

  author User @relation(fields: [authorId], references: [id])
}

enum ParentType {
  MATTER
  CONTACT
  DOCUMENT
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  entityType String
  entityId   String
  action     String
  metadata   Json?
  createdAt  DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id])
}

model Questionnaire {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  deletedBy   String?

  createdBy User                      @relation("QuestionnaireCreator", fields: [createdById], references: [id])
  questions QuestionnaireQuestion[]
  responses QuestionnaireResponse[]

  @@index([createdById])
  @@index([isActive])
  @@index([createdAt])
}

model QuestionnaireQuestion {
  id              String       @id @default(cuid())
  questionnaireId String
  questionText    String
  questionType    QuestionType
  order           Int          @default(0)
  required        Boolean      @default(true)
  placeholder     String?
  helpText        String?
  options         Json?
  validation      Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  questionnaire Questionnaire                 @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  answers       QuestionnaireResponseAnswer[]

  @@unique([questionnaireId, order])
  @@index([questionnaireId])
}

enum QuestionType {
  FREE_TEXT
  SINGLE_CHOICE
  MULTI_CHOICE
}

model QuestionnaireResponse {
  id              String         @id @default(cuid())
  questionnaireId String
  workflowStepId  String?
  matterId        String?
  respondentId    String
  status          ResponseStatus @default(IN_PROGRESS)
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  questionnaire Questionnaire                 @relation(fields: [questionnaireId], references: [id])
  respondent    User                          @relation("QuestionnaireRespondent", fields: [respondentId], references: [id])
  matter        Matter?                       @relation(fields: [matterId], references: [id])
  answers       QuestionnaireResponseAnswer[]

  @@index([questionnaireId])
  @@index([workflowStepId])
  @@index([matterId])
  @@index([respondentId])
  @@index([status])
}

enum ResponseStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

model QuestionnaireResponseAnswer {
  id         String   @id @default(cuid())
  responseId String
  questionId String
  answerText String?
  answerJson Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  response QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question QuestionnaireQuestion @relation(fields: [questionId], references: [id])

  @@unique([responseId, questionId])
  @@index([responseId])
  @@index([questionId])
}
